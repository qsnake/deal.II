REAL_SCALARS    := { double; float; long double }
COMPLEX_SCALARS := { std::complex<double>;
                     std::complex<float>;
                     std::complex<long double> }

DERIVATIVE_TENSORS := { double;
			Tensor<1,deal_II_dimension>;
			Tensor<2,deal_II_dimension> }

DEAL_II_VEC_TEMPLATES := { Vector; BlockVector }

SERIAL_VECTORS := { Vector<double>;
                    Vector<float> ;
		    Vector<long double>;

	            BlockVector<double>;
                    BlockVector<float>;
                    BlockVector<long double>;

		    @DEAL_II_EXPAND_TRILINOS_VECTOR@;
		    @DEAL_II_EXPAND_TRILINOS_MPI_VECTOR@;
		    @DEAL_II_EXPAND_PETSC_VECTOR@;
		    @DEAL_II_EXPAND_PETSC_MPI_VECTOR@;

		    @DEAL_II_EXPAND_TRILINOS_BLOCKVECTOR@;
		    @DEAL_II_EXPAND_TRILINOS_MPI_BLOCKVECTOR@;
		    @DEAL_II_EXPAND_PETSC_BLOCKVECTOR@;
		    @DEAL_II_EXPAND_PETSC_MPI_BLOCKVECTOR@;
                  }

DOFHANDLERS := { DoFHandler<deal_II_dimension>;
                 hp::DoFHandler<deal_II_dimension>;
		 MGDoFHandler<deal_II_dimension> }

DOFHANDLER_TEMPLATES := { DoFHandler;
                          hp::DoFHandler;
		          MGDoFHandler }

TRIANGULATION_AND_DOFHANDLERS := { Triangulation<deal_II_dimension>;
                                   DoFHandler<deal_II_dimension>;
                                   hp::DoFHandler<deal_II_dimension>;
		                   MGDoFHandler<deal_II_dimension> }

FEVALUES_BASES := { FEValuesBase<deal_II_dimension>;
	            FEFaceValuesBase<deal_II_dimension> }

SPARSITY_PATTERNS := { SparsityPattern;
                       CompressedSparsityPattern;
                       CompressedSetSparsityPattern;
                       CompressedSimpleSparsityPattern;
                       @DEAL_II_EXPAND_TRILINOS_SPARSITY_PATTERN@;

                       BlockSparsityPattern;
                       BlockCompressedSparsityPattern;
                       BlockCompressedSetSparsityPattern;
                       BlockCompressedSimpleSparsityPattern;
                       @DEAL_II_EXPAND_TRILINOS_BLOCK_SPARSITY_PATTERN@; }

DIMENSIONS := { 1; 2; 3 }
