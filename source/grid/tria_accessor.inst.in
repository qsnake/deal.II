//---------------------------------------------------------------------------
//    $Id: tria_accessor.inst.in 22654 2010-11-09 18:47:03Z bangerth $
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS)
  {
// Remark: The explicit instantiations for "TriaAccessor" were moved
// to the top of this source file. The reason is a slightly buggy version
// of the Apple gcc v.3.3.
// For more information, see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=24331
    template class TriaAccessorBase<1,deal_II_dimension>;
#if deal_II_dimension >= 2
    template class TriaAccessorBase<2,deal_II_dimension>;
#endif
#if deal_II_dimension >= 3
    template class TriaAccessorBase<3,deal_II_dimension>;
#endif

    template class TriaAccessor<1,deal_II_dimension,deal_II_dimension>;
#if deal_II_dimension >= 2
    template class TriaAccessor<2,deal_II_dimension,deal_II_dimension>;
#endif
#if deal_II_dimension >= 3
    template class TriaAccessor<3,deal_II_dimension,deal_II_dimension>;
#endif


    template class CellAccessor<deal_II_dimension>;
    template class TriaRawIterator<TriaAccessor<1, deal_II_dimension, deal_II_dimension> >;
    template class TriaRawIterator<CellAccessor<deal_II_dimension> >;
    template class TriaIterator<TriaAccessor<1, deal_II_dimension, deal_II_dimension> >;
    template class TriaIterator<CellAccessor<deal_II_dimension> >;
    template class TriaActiveIterator<TriaAccessor<1, deal_II_dimension, deal_II_dimension> >;
    template class TriaActiveIterator<CellAccessor<deal_II_dimension> >;


#if deal_II_dimension >= 2
    template class TriaRawIterator<TriaAccessor<2, deal_II_dimension, deal_II_dimension> >;
    template class TriaIterator<TriaAccessor<2, deal_II_dimension, deal_II_dimension> >;
    template class TriaActiveIterator<TriaAccessor<2, deal_II_dimension, deal_II_dimension> >;
#endif

#if deal_II_dimension >= 3
    template class TriaRawIterator<TriaAccessor<3, deal_II_dimension, deal_II_dimension> >;
    template class TriaIterator<TriaAccessor<3, deal_II_dimension, deal_II_dimension> >;
    template class TriaActiveIterator<TriaAccessor<3, deal_II_dimension, deal_II_dimension> >;
#endif

#if deal_II_dimension == 1
    template class TriaAccessorBase<1,deal_II_dimension,2>;
    template class TriaAccessorBase<1,deal_II_dimension,3>;

    template class TriaAccessor<1,deal_II_dimension,2>;
    template class TriaAccessor<1,deal_II_dimension,3>;
#endif
#if deal_II_dimension == 2
    template class TriaAccessorBase<1,deal_II_dimension,3>;
    template class TriaAccessorBase<2,deal_II_dimension,3>;

    template class TriaAccessor<1,deal_II_dimension,3>;
    template class TriaAccessor<2,deal_II_dimension,3>;
#endif

#if deal_II_dimension != 3
    template class CellAccessor<deal_II_dimension, deal_II_dimension+1>;
    template class TriaRawIterator<TriaAccessor<1, deal_II_dimension, deal_II_dimension+1> >;
    template class TriaRawIterator<CellAccessor<deal_II_dimension, deal_II_dimension+1> >;
    template class TriaIterator<TriaAccessor<1, deal_II_dimension, deal_II_dimension+1> >;
    template class TriaIterator<CellAccessor<deal_II_dimension, deal_II_dimension+1> >;
    template class TriaActiveIterator<TriaAccessor<1, deal_II_dimension, deal_II_dimension+1> >;
    template class TriaActiveIterator<CellAccessor<deal_II_dimension, deal_II_dimension+1> >;


#if deal_II_dimension == 2
    template class TriaRawIterator<TriaAccessor<2, deal_II_dimension, deal_II_dimension+1> >;
    template class TriaIterator<TriaAccessor<2, deal_II_dimension, deal_II_dimension+1> >;
    template class TriaActiveIterator<TriaAccessor<2, deal_II_dimension, deal_II_dimension+1> >;
#endif

#endif
  }


