//---------------------------------------------------------------------------
//    $Id: grid_tools.inst.in 24324 2011-09-14 23:56:36Z bangerth $
//    Version: $Name$
//
//    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------



for (X : TRIANGULATION_AND_DOFHANDLERS; deal_II_dimension : DIMENSIONS)
{
  namespace GridTools \{

  template
    unsigned int
    find_closest_vertex (const X &,
				    const Point<deal_II_dimension> &);

  template
    std::vector<X::active_cell_iterator>
    find_cells_adjacent_to_vertex(const X &,
					     const unsigned int);

  template
    X::active_cell_iterator
    find_active_cell_around_point (const X &,
					      const Point<deal_II_dimension> &p);

  template
    std::pair<X::active_cell_iterator, Point<deal_II_dimension> >
    find_active_cell_around_point (const Mapping<deal_II_dimension> &,
					      const X &,
					      const Point<deal_II_dimension> &);

  template
    std::list<std::pair<X::cell_iterator, X::cell_iterator> >

    get_finest_common_cells (const X &mesh_1,
			     const X &mesh_2);


  template
    bool
    have_same_coarse_mesh (const X &mesh_1,
				      const X &mesh_2);

  \}
}


for (deal_II_dimension : DIMENSIONS)
  {
    namespace GridTools \{

    template
      double
      diameter<deal_II_dimension> (const Triangulation<deal_II_dimension> &);

#if deal_II_dimension < 3
    template
      double
      diameter<deal_II_dimension, deal_II_dimension+1> (const Triangulation<deal_II_dimension, deal_II_dimension+1> &);
#endif

    template
      double
      volume<deal_II_dimension> (const Triangulation<deal_II_dimension> &,
	                                    const Mapping<deal_II_dimension> &);

#if deal_II_dimension < 3
    template
      double
      volume<deal_II_dimension, deal_II_dimension+1> (const Triangulation<deal_II_dimension, deal_II_dimension+1> &,
	                                                         const Mapping<deal_II_dimension, deal_II_dimension+1> &);
#endif

    template
      void delete_unused_vertices (std::vector<Point<deal_II_dimension> > &,
					      std::vector<CellData<deal_II_dimension> > &,
					      SubCellData &);

    template
      void delete_duplicated_vertices (std::vector<Point<deal_II_dimension> > &,
						  std::vector<CellData<deal_II_dimension> > &,
						  SubCellData &,
						  std::vector<unsigned int> &,
						  double);

    template
      void shift<deal_II_dimension> (const Point<deal_II_dimension> &,
						Triangulation<deal_II_dimension> &);

    template
      void scale<deal_II_dimension> (const double,
						Triangulation<deal_II_dimension> &);

    template
      std::pair<hp::DoFHandler<deal_II_dimension>::active_cell_iterator, Point<deal_II_dimension> >
      find_active_cell_around_point (const hp::MappingCollection<deal_II_dimension> &,
						const hp::DoFHandler<deal_II_dimension> &,
						const Point<deal_II_dimension> &);

    template
      void

      get_face_connectivity_of_cells (const Triangulation<deal_II_dimension> &triangulation,
				      SparsityPattern          &cell_connectivity);

#if deal_II_dimension < 3
    template
      void

      get_face_connectivity_of_cells (const Triangulation<deal_II_dimension,deal_II_dimension+1> &triangulation,
				      SparsityPattern          &cell_connectivity);
#endif

    template
      void
      partition_triangulation (const unsigned int,
					  Triangulation<deal_II_dimension> &);

    template
      void
      partition_triangulation (const unsigned int,
					  const SparsityPattern &,
					  Triangulation<deal_II_dimension> &);
#if deal_II_dimension < 3
    template
      void
      partition_triangulation (const unsigned int,
					  Triangulation<deal_II_dimension,deal_II_dimension+1> &);

    template
      void
      partition_triangulation (const unsigned int,
					  const SparsityPattern &,
					  Triangulation<deal_II_dimension,deal_II_dimension+1> &);
#endif

    template
      void

      get_subdomain_association (const Triangulation<deal_II_dimension>  &,
				 std::vector<types::subdomain_id_t> &);

    template
      unsigned int

      count_cells_with_subdomain_association (const Triangulation<deal_II_dimension> &,
					      const types::subdomain_id_t);


    template
      double
      minimal_cell_diameter (const Triangulation<deal_II_dimension> &triangulation);

    template
      double
      maximal_cell_diameter (const Triangulation<deal_II_dimension> &triangulation);

    template
      void
      create_union_triangulation (const Triangulation<deal_II_dimension> &triangulation_1,
					     const Triangulation<deal_II_dimension> &triangulation_2,
					     Triangulation<deal_II_dimension>       &result);

    template
      Triangulation<deal_II_dimension,deal_II_dimension>::DistortedCellList

      fix_up_distorted_child_cells (const Triangulation<deal_II_dimension,deal_II_dimension>::DistortedCellList &distorted_cells,
				    Triangulation<deal_II_dimension,deal_II_dimension> &triangulation);



#if deal_II_dimension != 3

    template
      void delete_unused_vertices (std::vector<Point<deal_II_dimension+1> > &,
					      std::vector<CellData<deal_II_dimension> > &,
					      SubCellData &);

    template
      void delete_duplicated_vertices (std::vector<Point<deal_II_dimension+1> > &,
						  std::vector<CellData<deal_II_dimension> > &,
						  SubCellData &,
						  std::vector<unsigned int> &,
						  double);

    template
      void shift<deal_II_dimension, deal_II_dimension+1> (const Point<deal_II_dimension+1> &,
								     Triangulation<deal_II_dimension, deal_II_dimension+1> &);

    template
      void scale<deal_II_dimension, deal_II_dimension+1> (const double,
								     Triangulation<deal_II_dimension, deal_II_dimension+1> &);


#endif



#if deal_II_dimension < 3

    template
      std::list<std::pair<Triangulation<deal_II_dimension,deal_II_dimension+1>::cell_iterator, Triangulation<deal_II_dimension,deal_II_dimension+1>::cell_iterator> >

      get_finest_common_cells (const Triangulation<deal_II_dimension,deal_II_dimension+1> &mesh_1,
			       const Triangulation<deal_II_dimension,deal_II_dimension+1> &mesh_2);

    template
      std::list<std::pair<DoFHandler<deal_II_dimension,deal_II_dimension+1>::cell_iterator, DoFHandler<deal_II_dimension,deal_II_dimension+1>::cell_iterator> >

      get_finest_common_cells (const DoFHandler<deal_II_dimension,deal_II_dimension+1> &mesh_1,
			       const DoFHandler<deal_II_dimension,deal_II_dimension+1> &mesh_2);

    template
      std::list<std::pair<hp::DoFHandler<deal_II_dimension,deal_II_dimension+1>::cell_iterator, hp::DoFHandler<deal_II_dimension,deal_II_dimension+1>::cell_iterator> >

      get_finest_common_cells (const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &mesh_1,
			       const hp::DoFHandler<deal_II_dimension,deal_II_dimension+1> &mesh_2);

    template
      std::list<std::pair<MGDoFHandler<deal_II_dimension,deal_II_dimension+1>::cell_iterator, MGDoFHandler<deal_II_dimension,deal_II_dimension+1>::cell_iterator> >

      get_finest_common_cells (const MGDoFHandler<deal_II_dimension,deal_II_dimension+1> &mesh_1,
			       const MGDoFHandler<deal_II_dimension,deal_II_dimension+1> &mesh_2);
#endif
    \}
  }

// TODO: Merge this and the next block by introducing a TRIA_AND_DOFHANDLER_TEMPLATES list.
for (deal_II_dimension : DIMENSIONS)
  {
  namespace GridTools \{
#if deal_II_dimension != 1
    template
      std::map<  Triangulation<deal_II_dimension-1,deal_II_dimension>::cell_iterator,
		 Triangulation<deal_II_dimension>::face_iterator>
      extract_boundary_mesh (const Triangulation<deal_II_dimension> &volume_mesh,
					Triangulation<deal_II_dimension-1,deal_II_dimension>  &surface_mesh,
					const std::set<unsigned char> &boundary_ids);
#endif
    \}
  }

for (deal_II_dimension : DIMENSIONS; Container : DOFHANDLER_TEMPLATES)
  {
    namespace GridTools \{

#if deal_II_dimension != 1
    template
      std::map<  Container<deal_II_dimension-1,deal_II_dimension>::cell_iterator,
		 Container<deal_II_dimension>::face_iterator>
      extract_boundary_mesh (const Container<deal_II_dimension> &volume_mesh,
					Container<deal_II_dimension-1,deal_II_dimension>  &surface_mesh,
					const std::set<unsigned char> &boundary_ids);
#endif
  \}
  }
