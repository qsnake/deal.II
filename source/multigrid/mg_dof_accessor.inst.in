//---------------------------------------------------------------------------
//    $Id: mg_dof_accessor.inst.in 23074 2010-12-27 22:09:09Z bangerth $
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS)
  {
  template
  void
  MGDoFAccessor<1,deal_II_dimension>::
  get_mg_dof_values (const int level,
		     const Vector<double> &values,
		     Vector<double>       &dof_values) const;

  template
  void
  MGDoFAccessor<1,deal_II_dimension>::
  get_mg_dof_values (const int level,
		     const Vector<float> &values,
		     Vector<float>       &dof_values) const;


#if deal_II_dimension >= 2

  template
  void
  MGDoFAccessor<2,deal_II_dimension>::
  get_mg_dof_values (const int level,
		     const Vector<double> &values,
		     Vector<double>       &dof_values) const;

  template
  void
  MGDoFAccessor<2,deal_II_dimension>::
  get_mg_dof_values (const int level,
		     const Vector<float> &values,
		     Vector<float>       &dof_values) const;

#endif


#if deal_II_dimension >= 3

  template
  void
  MGDoFAccessor<3,deal_II_dimension>::
  get_mg_dof_values (const int level,
		     const Vector<double> &values,
		     Vector<double>       &dof_values) const;

  template
  void
  MGDoFAccessor<3,deal_II_dimension>::
  get_mg_dof_values (const int level,
		     const Vector<float> &values,
		     Vector<float>       &dof_values) const;

#endif

  template
  void
  MGDoFCellAccessor<deal_II_dimension>::
  get_mg_dof_values (const Vector<double> &values,
		     Vector<double>       &dof_values) const;

  template
  void
  MGDoFCellAccessor<deal_II_dimension>::
  get_mg_dof_values (const Vector<float> &values,
		     Vector<float>       &dof_values) const;




#if deal_II_dimension == 1
  template class MGDoFAccessor<0, 1, 1>;
  template class MGDoFAccessor<0, 1, 2>;

  template class MGDoFAccessor<1, 1, 1>;
  template class MGDoFAccessor<1, 1, 2>;

  template class MGDoFCellAccessor<1>;
  template class MGDoFCellAccessor<1,2>;

  template MGDoFAccessor<0, 1, 1>::MGDoFAccessor (const MGDoFCellAccessor<1, 1> &);
  template MGDoFAccessor<0, 1, 1>::MGDoFAccessor (const InvalidAccessor<2, 1, 1> &);
  template MGDoFAccessor<0, 1, 2>::MGDoFAccessor (const MGDoFCellAccessor<1, 2> &);
  template MGDoFAccessor<0, 1, 2>::MGDoFAccessor (const InvalidAccessor<2, 1, 2> &);

  template class TriaRawIterator<MGDoFCellAccessor<1> >;
  template class TriaIterator<MGDoFCellAccessor<1> >;
  template class TriaActiveIterator<MGDoFCellAccessor<1> >;
#endif

#if deal_II_dimension == 2
  template class MGDoFAccessor<1, 2, 2>;
  template class MGDoFAccessor<2, 2, 2>;

  template class MGDoFAccessor<1, 2, 3>;
  template class MGDoFAccessor<2, 2, 3>;

  template class MGDoFCellAccessor<2>;
  template class MGDoFCellAccessor<2,3>;

  template class TriaRawIterator   <MGDoFAccessor<1, 2, 2> >;
  template class TriaIterator      <MGDoFAccessor<1, 2, 2> >;
  template class TriaActiveIterator<MGDoFAccessor<1, 2, 2> >;

  template class TriaRawIterator   <MGDoFAccessor<1, 2, 3> >;
  template class TriaIterator      <MGDoFAccessor<1, 2, 3> >;
  template class TriaActiveIterator<MGDoFAccessor<1, 2, 3> >;

  template class TriaRawIterator   <MGDoFCellAccessor<2> >;
  template class TriaIterator      <MGDoFCellAccessor<2> >;
  template class TriaActiveIterator<MGDoFCellAccessor<2> >;
#endif


#if deal_II_dimension == 3
  template class MGDoFAccessor<1, 3, 3>;
  template class MGDoFAccessor<2, 3, 3>;
  template class MGDoFAccessor<3, 3, 3>;

  template class MGDoFCellAccessor<3>;

  template class TriaRawIterator   <MGDoFAccessor<1, 3, 3> >;
  template class TriaIterator      <MGDoFAccessor<1, 3, 3> >;
  template class TriaActiveIterator<MGDoFAccessor<1, 3, 3> >;

  template class TriaRawIterator   <MGDoFAccessor<2, 3, 3> >;
  template class TriaIterator      <MGDoFAccessor<2, 3, 3> >;
  template class TriaActiveIterator<MGDoFAccessor<2, 3, 3> >;

  template class TriaRawIterator   <MGDoFCellAccessor<3> >;
  template class TriaIterator      <MGDoFCellAccessor<3> >;
  template class TriaActiveIterator<MGDoFCellAccessor<3> >;
#endif
  }

