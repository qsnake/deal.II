//---------------------------------------------------------------------------
//    $Id: matrices.inst.in 22749 2010-11-16 13:50:47Z kronbichler $
//    Version: $Name$
//
//    Copyright (C) 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------

for (deal_II_dimension : DIMENSIONS)
{
// non-hp version of create_mass_matrix
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension>       &mapping,
 const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension>       &mapping,
 const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);


template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension>       &mapping,
 const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension>       &mapping,
 const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);

// hp versions of functions
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>       &mapping,
 const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>       &mapping,
 const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);


template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>       &mapping,
 const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>       &mapping,
 const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);


#if deal_II_dimension != 1

template
void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>     &dof,
 const Quadrature<deal_II_dimension-1>   &q,
 SparseMatrix<double>      &matrix,
 const FunctionMap<deal_II_dimension>::type &rhs,
 Vector<double>            &rhs_vector,
 std::vector<unsigned int> &dof_to_boundary_mapping,
 const Function<deal_II_dimension> * const a,
 std::vector<unsigned int>);

template
void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension> &,
 const DoFHandler<deal_II_dimension>     &dof,
 const Quadrature<deal_II_dimension-1>   &q,
 SparseMatrix<double>      &matrix,
 const FunctionMap<deal_II_dimension>::type &rhs,
 Vector<double>            &rhs_vector,
 std::vector<unsigned int> &dof_to_boundary_mapping,
 const Function<deal_II_dimension> * const a,
 std::vector<unsigned int>);

template
void
MatrixCreator::create_boundary_mass_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>&,
 const hp::DoFHandler<deal_II_dimension>&,
 const hp::QCollection<deal_II_dimension-1>&,
 SparseMatrix<double>&,
 const FunctionMap<deal_II_dimension>::type&,
 Vector<double>&,
 std::vector<unsigned int>&,
 const Function<deal_II_dimension> * const,
 std::vector<unsigned int>);

template
void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>&,
 const hp::QCollection<deal_II_dimension-1>&,
 SparseMatrix<double>&,
 const FunctionMap<deal_II_dimension>::type&,
 Vector<double>&,
 std::vector<unsigned int>&,
 const Function<deal_II_dimension> * const,
 std::vector<unsigned int>);

#endif


// non-hp versions of create_laplace_matrix
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension>       &mapping,
 const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const Mapping<deal_II_dimension>       &mapping,
 const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const DoFHandler<deal_II_dimension>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);

// hp versions of create_laplace_matrix
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>       &mapping,
 const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const hp::MappingCollection<deal_II_dimension>       &mapping,
 const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);
template
void MatrixCreator::create_laplace_matrix<deal_II_dimension>
(const hp::DoFHandler<deal_II_dimension>    &dof,
 const hp::QCollection<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension> * const coefficient);



#if deal_II_dimension != 3

// non-hp version of create_mass_matrix
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_dimension+1>
(const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension+1> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_dimension+1>
(const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension+1> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_dimension+1>
(const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension+1>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension+1> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_dimension+1>
(const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<double>     &matrix,
 const Function<deal_II_dimension+1>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension+1> * const coefficient);


template
void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_dimension+1>
(const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension+1> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_dimension+1>
(const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension+1> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_dimension+1>
(const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension+1>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension+1> * const coefficient);
template
void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_dimension+1>
(const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
 const Quadrature<deal_II_dimension>    &q,
 SparseMatrix<float>     &matrix,
 const Function<deal_II_dimension+1>      &rhs,
 Vector<double>           &rhs_vector,
 const Function<deal_II_dimension+1> * const coefficient);

#if deal_II_dimension == 2

template
void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension,deal_II_dimension+1>
(const DoFHandler<deal_II_dimension,deal_II_dimension+1>     &dof,
 const Quadrature<deal_II_dimension-1>   &q,
 SparseMatrix<double>      &matrix,
 const FunctionMap<deal_II_dimension+1>::type &rhs,
 Vector<double>            &rhs_vector,
 std::vector<unsigned int> &dof_to_boundary_mapping,
 const Function<deal_II_dimension+1> * const a,
 std::vector<unsigned int>);

template
void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension,deal_II_dimension+1>
(const Mapping<deal_II_dimension,deal_II_dimension+1> &,
 const DoFHandler<deal_II_dimension,deal_II_dimension+1>     &dof,
 const Quadrature<deal_II_dimension-1>   &q,
 SparseMatrix<double>      &matrix,
 const FunctionMap<deal_II_dimension+1>::type &rhs,
 Vector<double>            &rhs_vector,
 std::vector<unsigned int> &dof_to_boundary_mapping,
 const Function<deal_II_dimension+1> * const a,
 std::vector<unsigned int>);

#endif

// #if deal_II_dimension != 1
// template
// void
// MatrixCreator::create_boundary_mass_matrix<deal_II_dimension,deal_II_dimension+1>
// (const Mapping<deal_II_dimension,deal_II_dimension+1>        &mapping,
//  const DoFHandler<deal_II_dimension,deal_II_dimension+1>     &dof,
//  const Quadrature<deal_II_dimension-1>   &q,
//  SparseMatrix<double>      &matrix,
//  const FunctionMap<deal_II_dimension+1>::type         &boundary_functions,
//  Vector<double>            &rhs_vector,
//  std::vector<unsigned int> &dof_to_boundary_mapping,
//  const Function<deal_II_dimension+1> * const a,
//  std::vector<unsigned int> &component_mapping);
// #endif

// template
// void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension,deal_II_dimension+1>
// (const DoFHandler<deal_II_dimension,deal_II_dimension+1>     &dof,
//  const Quadrature<deal_II_dimension-1>   &q,
//  SparseMatrix<double>      &matrix,
//  const FunctionMap<deal_II_dimension+1>::type &rhs,
//  Vector<double>            &rhs_vector,
//  std::vector<unsigned int> &dof_to_boundary_mapping,
//  const Function<deal_II_dimension+1> * const a,
//  std::vector<unsigned int> &component_mapping);


// // non-hp version of create_mass_matrix
// template
// void MatrixCreator::create_mass_matrix
// (const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
//  const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<double>     &matrix,
//  const Function<deal_II_dimension+1> * const coefficient);
// template
// void MatrixCreator::create_mass_matrix
// (const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<double>     &matrix,
//  const Function<deal_II_dimension+1> * const coefficient);
// template
// void MatrixCreator::create_mass_matrix
// (const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
//  const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<double>     &matrix,
//  const Function<deal_II_dimension+1>      &rhs,
//  Vector<double>           &rhs_vector,
//  const Function<deal_II_dimension+1> * const coefficient);
// template
// void MatrixCreator::create_mass_matrix
// (const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<double>     &matrix,
//  const Function<deal_II_dimension+1>      &rhs,
//  Vector<double>           &rhs_vector,
//  const Function<deal_II_dimension+1> * const coefficient);


// template
// void MatrixCreator::create_mass_matrix
// (const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
//  const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<float>     &matrix,
//  const Function<deal_II_dimension+1> * const coefficient);
// template
// void MatrixCreator::create_mass_matrix
// (const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<float>     &matrix,
//  const Function<deal_II_dimension+1> * const coefficient);
// template
// void MatrixCreator::create_mass_matrix
// (const Mapping<deal_II_dimension,deal_II_dimension+1>       &mapping,
//  const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<float>     &matrix,
//  const Function<deal_II_dimension+1>      &rhs,
//  Vector<double>           &rhs_vector,
//  const Function<deal_II_dimension+1> * const coefficient);
// template
// void MatrixCreator::create_mass_matrix
// (const DoFHandler<deal_II_dimension,deal_II_dimension+1>    &dof,
//  const Quadrature<deal_II_dimension>    &q,
//  SparseMatrix<float>     &matrix,
//  const Function<deal_II_dimension+1>      &rhs,
//  Vector<double>           &rhs_vector,
//  const Function<deal_II_dimension+1> * const coefficient);


#endif
}

