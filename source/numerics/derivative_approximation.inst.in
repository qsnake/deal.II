//---------------------------------------------------------------------------
//    $Id: derivative_approximation.inst.in 22749 2010-11-16 13:50:47Z kronbichler $
//    Version: $Name$
//
//    Copyright (C) 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------

for (deal_II_dimension : DIMENSIONS)
{
#define INSTANTIATE(InputVector,DH)                      \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_gradient<deal_II_dimension>                  \
(const Mapping<deal_II_dimension> &mapping,              \
 const DH<deal_II_dimension> &dof_handler,               \
 const InputVector  &solution,                           \
 Vector<float>         &derivative_norm,                 \
 const unsigned int     component);                      \
                                                         \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_gradient<deal_II_dimension>                  \
(const DH<deal_II_dimension> &dof_handler,               \
 const InputVector     &solution,                        \
 Vector<float>         &derivative_norm,                 \
 const unsigned int     component);                      \
                                                         \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_second_derivative<deal_II_dimension>         \
(const Mapping<deal_II_dimension> &mapping,              \
 const DH<deal_II_dimension> &dof_handler,               \
 const InputVector  &solution,                           \
 Vector<float>         &derivative_norm,                 \
 const unsigned int     component);                      \
                                                         \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_second_derivative<deal_II_dimension>         \
(const DH<deal_II_dimension> &dof_handler,               \
 const InputVector     &solution,                        \
 Vector<float>         &derivative_norm,                 \
 const unsigned int     component);                      \
                                                         \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_derivative_tensor<deal_II_dimension>         \
(const DH<deal_II_dimension> &dof_handler,               \
 const InputVector     &solution,                        \
 const DH<deal_II_dimension>::active_cell_iterator &cell,\
 Tensor<1,deal_II_dimension> &derivative,                \
 const unsigned int     component);                      \
                                                         \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_derivative_tensor<deal_II_dimension>         \
(const DH<deal_II_dimension> &dof_handler,               \
 const InputVector     &solution,                        \
 const DH<deal_II_dimension>::active_cell_iterator &cell,\
 Tensor<2,deal_II_dimension> &derivative,                \
 const unsigned int     component);                      \
                                                         \
template                                                 \
void                                                     \
DerivativeApproximation::                                \
approximate_derivative_tensor<deal_II_dimension>         \
(const DH<deal_II_dimension> &dof_handler,               \
 const InputVector     &solution,                        \
 const DH<deal_II_dimension>::active_cell_iterator &cell,\
 Tensor<3,deal_II_dimension> &derivative,                \
 const unsigned int     component)


INSTANTIATE(Vector<double>, DoFHandler);
INSTANTIATE(Vector<float>, DoFHandler);
INSTANTIATE(BlockVector<double>, DoFHandler);
INSTANTIATE(BlockVector<float>, DoFHandler);

INSTANTIATE(Vector<double>, hp::DoFHandler);
INSTANTIATE(Vector<float>, hp::DoFHandler);
INSTANTIATE(BlockVector<double>, hp::DoFHandler);
INSTANTIATE(BlockVector<float>, hp::DoFHandler);

#ifdef DEAL_II_USE_PETSC
INSTANTIATE(PETScWrappers::Vector, DoFHandler);
INSTANTIATE(PETScWrappers::BlockVector, DoFHandler);

INSTANTIATE(PETScWrappers::Vector, hp::DoFHandler);
INSTANTIATE(PETScWrappers::BlockVector, hp::DoFHandler);
#endif

#undef INSTANTIATE

template
double
DerivativeApproximation::
derivative_norm(const Tensor<1,deal_II_dimension> &derivative);

template
double
DerivativeApproximation::
derivative_norm(const Tensor<2,deal_II_dimension> &derivative);

template
double
DerivativeApproximation::
derivative_norm(const Tensor<3,deal_II_dimension> &derivative);


// static variables
// 
// on AIX, the linker is unhappy about some missing symbols. they
// should really be there, but explicitly instantiating them will also
// not hurt
template
const UpdateFlags
DerivativeApproximation::Gradient<deal_II_dimension>::update_flags;

template
const UpdateFlags
DerivativeApproximation::SecondDerivative<deal_II_dimension>::update_flags;
template
const UpdateFlags
DerivativeApproximation::ThirdDerivative<deal_II_dimension>::update_flags;
}
