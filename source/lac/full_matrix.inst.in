//---------------------------------------------------------------------------
//    $Id: full_matrix.inst.in 19352 2009-08-31 13:04:05Z kronbichler $
//    Version: $Name$
//
//    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


for (S : REAL_SCALARS)
  {
    template class FullMatrix<S>;

    template void FullMatrix<S>::print(
      LogStream&, const unsigned int, const unsigned int) const;
    template void FullMatrix<S>::print(
      std::ostream&, const unsigned int, const unsigned int) const;    

    template void FullMatrix<S>::copy_from<1>(
      Tensor<2,1>&, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned);

    template void FullMatrix<S>::copy_from<2>(
      Tensor<2,2>&, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned);

    template void FullMatrix<S>::copy_from<3>(
      Tensor<2,3>&, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned);

    template void FullMatrix<S>::copy_to<1>(
      Tensor<2,1>&, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned);

    template void FullMatrix<S>::copy_to<2>(
      Tensor<2,2>&, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned);

    template void FullMatrix<S>::copy_to<3>(
      Tensor<2,3>&, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned, const unsigned);



  }

for (S1, S2 : REAL_SCALARS)
  {
    template
      FullMatrix<S1>& FullMatrix<S1>::operator = (const LAPACKFullMatrix<S2>&);

    template
      void FullMatrix<S1>::fill<S2> (
	const FullMatrix<S2>&, unsigned, unsigned, unsigned, unsigned);
    template
      void FullMatrix<S1>::add<S2> (const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::add<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::add<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::add<S2> (
	const FullMatrix<S2>&, S1, unsigned, unsigned,unsigned, unsigned);
    template
      void FullMatrix<S1>::Tadd<S2> (const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::Tadd<S2> (
	const FullMatrix<S2>&, S1, unsigned, unsigned, unsigned, unsigned);
    template
      void FullMatrix<S1>::equ<S2> (const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::equ<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::equ<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::mmult<S2> (FullMatrix<S2>&, const FullMatrix<S2>&, const bool) const;
    template
      void FullMatrix<S1>::Tmmult<S2> (FullMatrix<S2>&, const FullMatrix<S2>&, const bool) const;
    template
      void FullMatrix<S1>::mTmult<S2> (FullMatrix<S2>&, const FullMatrix<S2>&, const bool) const;
    template
      void FullMatrix<S1>::TmTmult<S2> (FullMatrix<S2>&, const FullMatrix<S2>&, const bool) const;
    template
      void FullMatrix<S1>::invert<S2> (const FullMatrix<S2>&);
 
    template 
      void FullMatrix<S1>::left_invert<S2> (const FullMatrix<S2> &);
    template 
      void FullMatrix<S1>::right_invert<S2> (const FullMatrix<S2> &);

    template
      void FullMatrix<S1>::fill_permutation<S2> (
	const FullMatrix<S2>&,
	const std::vector<unsigned int>&,
	const std::vector<unsigned int>&);
    template
      void FullMatrix<S1>::vmult<S2>(
      Vector<S2>&, const Vector<S2>&, bool) const;
    template
      void FullMatrix<S1>::Tvmult<S2>(
      Vector<S2>&, const Vector<S2>&, bool) const;
    template
      S2 FullMatrix<S1>::matrix_norm_square<S2> (
      const Vector<S2> &) const;
    template
      S2 FullMatrix<S1>::matrix_scalar_product<S2>(
      const Vector<S2>&, const Vector<S2>&) const;
    template
      void FullMatrix<S1>::forward<S2>(
      Vector<S2>&, const Vector<S2>&) const;
    template
      void FullMatrix<S1>::backward<S2>(
      Vector<S2>&, const Vector<S2>&) const;

    template
      void FullMatrix<S1>::precondition_Jacobi<S2> (
	Vector<S2> &, const Vector<S2> &, const S1) const;

    template
      void FullMatrix<S1>::cholesky<S2> (const FullMatrix<S2>&);

    template
      void FullMatrix<S1>::outer_product<S2> (const Vector<S2>&,
                                              const Vector<S2>&);
  }

for (S1, S2, S3 : REAL_SCALARS)
  {
    template
      S1
      FullMatrix<S1>::residual<S2,S3>(Vector<S2>&,
				      const Vector<S2>&,
				      const Vector<S3>&) const;
  }





// same for complex scalars

for (S : COMPLEX_SCALARS)
  {
    template class FullMatrix<S>;

    template void FullMatrix<S>::print(
      LogStream&, const unsigned int, const unsigned int) const;
    template void FullMatrix<S>::print(
      std::ostream&, const unsigned int, const unsigned int) const;
  }

for (S1, S2 : COMPLEX_SCALARS)
  {
    template
      void FullMatrix<S1>::fill<S2> (
	const FullMatrix<S2>&, unsigned, unsigned, unsigned, unsigned);
    template
      void FullMatrix<S1>::add<S2> (const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::add<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::add<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::add<S2> (
	const FullMatrix<S2>&, S1, unsigned, unsigned,unsigned, unsigned);
    template
      void FullMatrix<S1>::Tadd<S2> (const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::Tadd<S2> (
	const FullMatrix<S2>&, S1, unsigned, unsigned, unsigned, unsigned);
    template
      void FullMatrix<S1>::equ<S2> (const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::equ<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::equ<S2> (const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&,
				    const S1, const FullMatrix<S2>&);
    template
      void FullMatrix<S1>::mmult<S2> (FullMatrix<S2>&, const FullMatrix<S2>&, const bool) const;
    template
      void FullMatrix<S1>::Tmmult<S2> (FullMatrix<S2>&, const FullMatrix<S2>&, const bool) const;
    template
      void FullMatrix<S1>::invert<S2> (const FullMatrix<S2>&);

    template 
      void FullMatrix<S1>::left_invert<S2> (const FullMatrix<S2> &);
    template 
      void FullMatrix<S1>::right_invert<S2> (const FullMatrix<S2> &);

    template
      void FullMatrix<S1>::fill_permutation<S2> (
	const FullMatrix<S2>&,
	const std::vector<unsigned int>&,
	const std::vector<unsigned int>&);
    template
      void FullMatrix<S1>::vmult<S2>(
      Vector<S2>&, const Vector<S2>&, bool) const;
    template
      void FullMatrix<S1>::Tvmult<S2>(
      Vector<S2>&, const Vector<S2>&, bool) const;
    template
      S2 FullMatrix<S1>::matrix_norm_square<S2> (
      const Vector<S2> &) const;
    template
      S2 FullMatrix<S1>::matrix_scalar_product<S2>(
      const Vector<S2>&, const Vector<S2>&) const;
    template
      void FullMatrix<S1>::forward<S2>(
      Vector<S2>&, const Vector<S2>&) const;
    template
      void FullMatrix<S1>::backward<S2>(
      Vector<S2>&, const Vector<S2>&) const;

    template
      void FullMatrix<S1>::precondition_Jacobi<S2> (
	Vector<S2> &, const Vector<S2> &, const S1) const;
  }

for (S1, S2, S3 : COMPLEX_SCALARS)
  {
    template
      S1
      FullMatrix<S1>::residual<S2,S3>(Vector<S2>&,
				      const Vector<S2>&,
				      const Vector<S3>&) const;
  }
