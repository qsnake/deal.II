//---------------------------------------------------------------------------
//    $Id: precondition_block.inst.in 22123 2010-09-22 21:46:37Z kanschat $
//
//    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005, 2006, 2007, 2009, 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


for (S : REAL_SCALARS)
  {
    template class PreconditionBlockBase<S>;
  }


for (S1, S2 : REAL_SCALARS)
  {
    template class PreconditionBlock<SparseMatrix<S1>, S2>;
    template class PreconditionBlockJacobi<SparseMatrix<S1>, S2>;
    template class PreconditionBlockSOR<SparseMatrix<S1>, S2>;
    template class PreconditionBlockSSOR<SparseMatrix<S1>, S2>;
  }


for (S1, S2, S3 : REAL_SCALARS)
  {
// ------------ PreconditionBlockJacobi -----------------
    template
      void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::vmult<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::Tvmult<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::vmult_add<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::Tvmult_add<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::step<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::Tstep<S3>
      (Vector<S3> &, const Vector<S3> &) const;

// ------------ PreconditionBlockSOR -----------------
    template
      void PreconditionBlockSOR<SparseMatrix<S1>, S2>::vmult<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSOR<SparseMatrix<S1>, S2>::Tvmult<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSOR<SparseMatrix<S1>, S2>::vmult_add<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSOR<SparseMatrix<S1>, S2>::Tvmult_add<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSOR<SparseMatrix<S1>, S2>::step<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSOR<SparseMatrix<S1>, S2>::Tstep<S3>
      (Vector<S3> &, const Vector<S3> &) const;

// ------------ PreconditionBlockSSOR -----------------
    template
      void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::vmult<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::Tvmult<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::step<S3>
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::Tstep<S3>
      (Vector<S3> &, const Vector<S3> &) const;
  }

