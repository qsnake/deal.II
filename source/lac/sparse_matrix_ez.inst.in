//----------------------------  sparse_matrix_ez.inst.in  ---------------------------
//    $Id: sparse_matrix_ez.inst.in 19048 2009-07-08 19:32:58Z bangerth $
//    Version: $Name$
//
//    Copyright (C) 2002, 2003, 2006, 2007 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//----------------------------  sparse_matrix_ez.inst.in  ---------------------------


for (S : REAL_SCALARS)
  {
    template class SparseMatrixEZ<S>;
  }


for (S1, S2 : REAL_SCALARS)
  {
    template
      void SparseMatrixEZ<S1>::vmult<S2> (Vector<S2> &,
					  const Vector<S2> &) const;
    template
      void SparseMatrixEZ<S1>::Tvmult<S2> (Vector<S2> &,
					   const Vector<S2> &) const;
    template
      void SparseMatrixEZ<S1>::vmult_add<S2> (Vector<S2> &,
					      const Vector<S2> &) const;
    template
      void SparseMatrixEZ<S1>::Tvmult_add<S2> (Vector<S2> &,
					       const Vector<S2> &) const;

    template
      void SparseMatrixEZ<S1>::precondition_SSOR<S2> (Vector<S2> &,
						      const Vector<S2> &,
						      const S1,
						      const std::vector<unsigned int>&) const;
    template
      void SparseMatrixEZ<S1>::precondition_SOR<S2> (Vector<S2> &,
						     const Vector<S2> &,
						     const S1) const;
    template
      void SparseMatrixEZ<S1>::precondition_TSOR<S2> (Vector<S2> &,
						      const Vector<S2> &,
						      const S1) const;
    template
      void SparseMatrixEZ<S1>::precondition_Jacobi<S2> (Vector<S2> &,
							const Vector<S2> &,
							const S1) const;
  }

